import { LeftOutlined } from '@ant-design/icons';
import { theme } from 'antd';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React from 'react';

import type { BreadcrumbLocationItem } from './breadCrumbLocation.reuse';
import { BreadcrumbLocation } from './breadCrumbLocation.reuse';

type HeaderProps = {
  title: string;
  breadcrumbItems?: BreadcrumbLocationItem[];
  buttonActions?: React.ReactNode[];
};

export const HeadCustom = dynamic(
  Promise.resolve(
    ({ title, breadcrumbItems = [], buttonActions = [] }: HeaderProps) => {
      const router = useRouter();
      const { token } = theme.useToken();

      return (
        <>
          <Head>
            <title>{title || 'Dashboard'}</title>
            <meta name="description" content="Generated by create next app" />
            <meta
              name="viewport"
              content="width=device-width, initial-scale=1"
            />
            <link rel="icon" href="/favicon.ico" />
          </Head>

          <div
            style={{
              boxShadow: '0px 0px 4px rgba(0, 0, 0, 0.25)',
            }}
            className="flex h-[85px] w-full items-center justify-between bg-white px-[40px] py-5"
          >
            <div className="w-full">
              {breadcrumbItems.length ? (
                <BreadcrumbLocation items={breadcrumbItems} />
              ) : (
                <></>
              )}
              <div className="flex w-full items-center gap-x-2">
                <LeftOutlined
                  width={6}
                  height={11}
                  className="cursor-pointer"
                  onClick={() => {
                    router.back();
                  }}
                />
                <h1
                  className={`mb-0 w-full truncate text-h3 text-primary-700`}
                  style={{
                    color: token.colorPrimary,
                  }}
                >
                  {title}
                </h1>
              </div>
            </div>

            <div className="flex gap-x-2">
              {buttonActions.length > 0 ? (
                buttonActions.map((button) => button)
              ) : (
                <></>
              )}
            </div>
          </div>
        </>
      );
    }
  )
);
